name: release

on:
  push:
    tags:
      - "*-release"
      - "*-beta"

jobs:
  details:
    runs-on: ubuntu-latest
    outputs:
      package_name: ${{ steps.package_information.outputs.package_name }}
      new_version: ${{ steps.release.outputs.new_version }}
      suffix: ${{ steps.release.outputs.suffix }}
      tag_name: ${{ steps.release.outputs.tag_name }}
    steps:
      - uses: actions/checkout@v4

      - name: Extract tag and Details
        id: release
        run: |
          if [ "${{ github.ref_type }}" = "tag" ]; then
            TAG_NAME=${GITHUB_REF#refs/tags/}
            NEW_VERSION=$(echo $TAG_NAME | awk -F'-' '{print $1}')
            SUFFIX=$(echo $TAG_NAME | awk -F'-' '{print $2}')
            echo "new_version=$NEW_VERSION" >> "$GITHUB_OUTPUT"
            echo "suffix=$SUFFIX" >> "$GITHUB_OUTPUT"
            echo "tag_name=$TAG_NAME" >> "$GITHUB_OUTPUT"
          else
            echo "No tag found"
            exit 1
          fi

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install uv
        run: pip install uv

      - name: Get Name of Package
        id: package_information
        run: |
          PACKAGE_NAME=$(uv pip show . | grep -i '^Name:' | awk '{print $2}')
          echo "package_name=$PACKAGE_NAME" >> "$GITHUB_OUTPUT"

  check_pypi:
    needs: details
    runs-on: ubuntu-latest
    steps:
      - name: Fetch information from PyPI
        run: |
          PACKAGE_NAME=${{ needs.details.outputs.package_name }}
          response=$(curl -s https://pypi.org/pypi/$PACKAGE_NAME/json || echo "{}")
          latest_previous_version=$(echo $response | grep -oP '"releases":\{"\K[^"]+' | sort -rV | head -n 1)
          if [ -z "$latest_previous_version" ]; then
            latest_previous_version="0.0.0"
          fi
          echo "latest_previous_version=$latest_previous_version" >> $GITHUB_ENV

      - name: Compare versions
        run: |
          NEW_VERSION=${{ needs.details.outputs.new_version }}
          LATEST_VERSION=$latest_previous_version
          if [ "$(printf '%s\n' "$LATEST_VERSION" "$NEW_VERSION" | sort -rV | head -n 1)" != "$NEW_VERSION" ]; then
            echo "The new version $NEW_VERSION is not greater than $LATEST_VERSION"
            exit 1
          fi

  setup_and_build:
    needs: details
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install uv
        run: pip install uv

      - name: Bump version in pyproject.toml
        run: |
          sed -i "s/^version = .*/version = \"${{ needs.details.outputs.new_version }}\"/" pyproject.toml
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git checkout -b version-bump-${{ needs.details.outputs.new_version }}
          git add pyproject.toml
          git commit -m "Bump version to ${{ needs.details.outputs.new_version }}"
          git push origin version-bump-${{ needs.details.outputs.new_version }}

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          branch: version-bump-${{ needs.details.outputs.new_version }}
          title: "Bump version to ${{ needs.details.outputs.new_version }}"
          body: "This PR bumps the version to ${{ needs.details.outputs.new_version }}."
          labels: "version-bump"

      - name: Install dependencies
        run: uv pip install --system .

      - name: Build package
        run: uv build

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  pypi_publish:
    name: Upload release to PyPI
    needs: [setup_and_build, details]
    runs-on: ubuntu-latest
    environment:
      name: release
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Publish distribution to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

  github_release:
    name: Create GitHub Release
    needs: [setup_and_build, details]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: ./dist/

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          tag_name: ${{ needs.details.outputs.tag_name }}
          release_name: ${{ needs.details.outputs.tag_name }}
          body: "Release of version ${{ needs.details.outputs.new_version }}"
          draft: false
          prerelease: ${{ needs.details.outputs.suffix != 'release' }}
